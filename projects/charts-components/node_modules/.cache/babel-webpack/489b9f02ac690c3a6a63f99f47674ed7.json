{"ast":null,"code":"import _asyncToGenerator from \"C:/projects/own-npm/charts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// noinspection JSVoidFunctionReturnValueUsed\nimport { ChartLineComponent } from './chart-line.component';\nimport { EventEmitter } from '@angular/core';\nimport { MockBuilder, MockProvider, MockRender } from \"ng-mocks\";\nimport { anything, capture, instance, mock, reset, verify, when } from \"ts-mockito\";\nimport { Subject } from \"rxjs\";\nimport { ChartService } from \"../../../services\";\nimport { ChartModule } from \"../../../chart.module\";\nimport { ChartAxisLimitService } from \"../../../services/chart-axis-limit.service\";\nimport { ChartPlateService } from \"../../services/chart-plate.service\";\nimport { should } from \"@artstesh/it-should\";\nimport { ChartLineSettings } from \"./chart-line.settings\";\nimport { Forger } from \"@artstesh/forger\";\nimport { SettingsMapService } from \"../../../services/settings-map.service\";\ndescribe('#chart-types LineChartComponent', () => {\n  let fixture;\n  let service = mock(ChartService);\n  const plateService = mock(ChartPlateService);\n  const limitService = mock(ChartAxisLimitService);\n  const mapService = mock(SettingsMapService);\n  let limitServiceChanged$;\n  let chartInitialized;\n  let settings;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    settings = new ChartLineSettings().copy(Forger.create({}, 1, {\n      \"type\": 0,\n      \"children\": [{\n        \"name\": \"order\",\n        \"type\": 6\n      }, {\n        \"name\": \"name\",\n        \"type\": 5\n      }, {\n        \"name\": \"color\",\n        \"type\": 5\n      }, {\n        \"name\": \"yLeft\",\n        \"type\": 8\n      }, {\n        \"name\": \"isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"copy\",\n        \"type\": 0,\n        \"children\": []\n      }, {\n        \"name\": \"_isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"_copy\",\n        \"type\": 0,\n        \"children\": []\n      }, {\n        \"name\": \"order\",\n        \"type\": 6\n      }, {\n        \"name\": \"name\",\n        \"type\": 5\n      }, {\n        \"name\": \"color\",\n        \"type\": 5\n      }, {\n        \"name\": \"yLeft\",\n        \"type\": 8\n      }, {\n        \"name\": \"isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"copy\",\n        \"type\": 0,\n        \"children\": []\n      }, {\n        \"name\": \"_isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"_copy\",\n        \"type\": 0,\n        \"children\": []\n      }, {\n        \"name\": \"pointRadius\",\n        \"type\": 11,\n        \"restrictions\": [{\n          \"type\": 6\n        }, {\n          \"type\": 3,\n          \"children\": [{\n            \"type\": 6\n          }]\n        }]\n      }, {\n        \"name\": \"setPointRadius\",\n        \"type\": 0,\n        \"children\": [{\n          \"name\": \"order\",\n          \"type\": 6\n        }, {\n          \"name\": \"name\",\n          \"type\": 5\n        }, {\n          \"name\": \"color\",\n          \"type\": 5\n        }, {\n          \"name\": \"yLeft\",\n          \"type\": 8\n        }, {\n          \"name\": \"isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"order\",\n          \"type\": 6\n        }, {\n          \"name\": \"name\",\n          \"type\": 5\n        }, {\n          \"name\": \"color\",\n          \"type\": 5\n        }, {\n          \"name\": \"yLeft\",\n          \"type\": 8\n        }, {\n          \"name\": \"isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"pointRadius\",\n          \"type\": 11,\n          \"restrictions\": [{\n            \"type\": 6\n          }, {\n            \"type\": 3,\n            \"children\": [{\n              \"type\": 6\n            }]\n          }]\n        }, {\n          \"name\": \"setPointRadius\",\n          \"type\": 9\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 9\n        }]\n      }, {\n        \"name\": \"_isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"_copy\",\n        \"type\": 0,\n        \"children\": [{\n          \"name\": \"order\",\n          \"type\": 6\n        }, {\n          \"name\": \"name\",\n          \"type\": 5\n        }, {\n          \"name\": \"color\",\n          \"type\": 5\n        }, {\n          \"name\": \"yLeft\",\n          \"type\": 8\n        }, {\n          \"name\": \"isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"order\",\n          \"type\": 6\n        }, {\n          \"name\": \"name\",\n          \"type\": 5\n        }, {\n          \"name\": \"color\",\n          \"type\": 5\n        }, {\n          \"name\": \"yLeft\",\n          \"type\": 8\n        }, {\n          \"name\": \"isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"pointRadius\",\n          \"type\": 11,\n          \"restrictions\": [{\n            \"type\": 6\n          }, {\n            \"type\": 3,\n            \"children\": [{\n              \"type\": 6\n            }]\n          }]\n        }, {\n          \"name\": \"setPointRadius\",\n          \"type\": 9\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 9\n        }]\n      }]\n    }));\n    limitServiceChanged$ = new Subject();\n    chartInitialized = new EventEmitter();\n    when(plateService.chartInitialized).thenReturn(chartInitialized);\n    when(limitService.changed).thenReturn(limitServiceChanged$.asObservable());\n    return MockBuilder(ChartLineComponent, ChartModule).provide(MockProvider(ChartPlateService, instance(plateService))).provide(MockProvider(SettingsMapService, instance(mapService))).provide(MockProvider(ChartAxisLimitService, instance(limitService))).provide(MockProvider(ChartService, instance(service)));\n  }));\n  beforeEach(() => {\n    fixture = MockRender(ChartLineComponent);\n    fixture.componentInstance.settings = settings;\n  });\n  afterEach(() => {\n    reset(mapService);\n    reset(plateService);\n    reset(limitService);\n    expect().nothing();\n  });\n  it('should create', () => {\n    expect(fixture.componentInstance).toBeTruthy();\n  });\n  it('should add line on chartInitialized', () => {\n    const dataset = Forger.create({}, 1, {\n      \"type\": 6\n    }); // a trick\n\n    const data = Forger.create({}, 1, {\n      \"type\": 1,\n      \"children\": [{\n        \"type\": 0,\n        \"children\": [{\n          \"name\": \"x\",\n          \"type\": 6\n        }, {\n          \"name\": \"y\",\n          \"type\": 11,\n          \"restrictions\": [{\n            \"type\": 6\n          }]\n        }]\n      }]\n    });\n    const settings = new ChartLineSettings().copy(Forger.create({}, 1, {\n      \"type\": 0,\n      \"children\": [{\n        \"name\": \"order\",\n        \"type\": 6\n      }, {\n        \"name\": \"name\",\n        \"type\": 5\n      }, {\n        \"name\": \"color\",\n        \"type\": 5\n      }, {\n        \"name\": \"yLeft\",\n        \"type\": 8\n      }, {\n        \"name\": \"isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"copy\",\n        \"type\": 0,\n        \"children\": []\n      }, {\n        \"name\": \"_isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"_copy\",\n        \"type\": 0,\n        \"children\": []\n      }, {\n        \"name\": \"order\",\n        \"type\": 6\n      }, {\n        \"name\": \"name\",\n        \"type\": 5\n      }, {\n        \"name\": \"color\",\n        \"type\": 5\n      }, {\n        \"name\": \"yLeft\",\n        \"type\": 8\n      }, {\n        \"name\": \"isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"copy\",\n        \"type\": 0,\n        \"children\": []\n      }, {\n        \"name\": \"_isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"_copy\",\n        \"type\": 0,\n        \"children\": []\n      }, {\n        \"name\": \"pointRadius\",\n        \"type\": 11,\n        \"restrictions\": [{\n          \"type\": 6\n        }, {\n          \"type\": 3,\n          \"children\": [{\n            \"type\": 6\n          }]\n        }]\n      }, {\n        \"name\": \"setPointRadius\",\n        \"type\": 0,\n        \"children\": [{\n          \"name\": \"order\",\n          \"type\": 6\n        }, {\n          \"name\": \"name\",\n          \"type\": 5\n        }, {\n          \"name\": \"color\",\n          \"type\": 5\n        }, {\n          \"name\": \"yLeft\",\n          \"type\": 8\n        }, {\n          \"name\": \"isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"order\",\n          \"type\": 6\n        }, {\n          \"name\": \"name\",\n          \"type\": 5\n        }, {\n          \"name\": \"color\",\n          \"type\": 5\n        }, {\n          \"name\": \"yLeft\",\n          \"type\": 8\n        }, {\n          \"name\": \"isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"pointRadius\",\n          \"type\": 11,\n          \"restrictions\": [{\n            \"type\": 6\n          }, {\n            \"type\": 3,\n            \"children\": [{\n              \"type\": 6\n            }]\n          }]\n        }, {\n          \"name\": \"setPointRadius\",\n          \"type\": 9\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 9\n        }]\n      }, {\n        \"name\": \"_isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"_copy\",\n        \"type\": 0,\n        \"children\": [{\n          \"name\": \"order\",\n          \"type\": 6\n        }, {\n          \"name\": \"name\",\n          \"type\": 5\n        }, {\n          \"name\": \"color\",\n          \"type\": 5\n        }, {\n          \"name\": \"yLeft\",\n          \"type\": 8\n        }, {\n          \"name\": \"isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"order\",\n          \"type\": 6\n        }, {\n          \"name\": \"name\",\n          \"type\": 5\n        }, {\n          \"name\": \"color\",\n          \"type\": 5\n        }, {\n          \"name\": \"yLeft\",\n          \"type\": 8\n        }, {\n          \"name\": \"isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"pointRadius\",\n          \"type\": 11,\n          \"restrictions\": [{\n            \"type\": 6\n          }, {\n            \"type\": 3,\n            \"children\": [{\n              \"type\": 6\n            }]\n          }]\n        }, {\n          \"name\": \"setPointRadius\",\n          \"type\": 9\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 9\n        }]\n      }]\n    }));\n    when(mapService.lineDataset(settings, data)).thenReturn(dataset); //\n\n    chartInitialized.next(); //\n\n    verify(plateService.addDataset(anything())).once();\n  });\n  it('should define backgroundColor', () => {\n    chartInitialized.next(); //\n\n    const [dataset] = capture(plateService.addDataset).last();\n    should().string(dataset.backgroundColor).equals(settings.color);\n  });\n  it('should define borderColor', () => {\n    chartInitialized.next(); //\n\n    const [dataset] = capture(plateService.addDataset).last();\n    should().string(dataset.borderColor).equals(settings.color);\n  });\n  it('should define pointRadius', () => {\n    chartInitialized.next(); //\n\n    const [dataset] = capture(plateService.addDataset).last();\n    should().number(dataset.pointRadius).equals(settings.pointRadius);\n  });\n  it('should define type', () => {\n    chartInitialized.next(); //\n\n    const [dataset] = capture(plateService.addDataset).last();\n    should().string(dataset.type).equals('line');\n  });\n  it('should define name', () => {\n    chartInitialized.next(); //\n\n    const [dataset] = capture(plateService.addDataset).last();\n    should().string(dataset.label).equals(settings.name);\n  });\n  it('should define order', () => {\n    chartInitialized.next(); //\n\n    const [dataset] = capture(plateService.addDataset).last();\n    should().number(dataset.order).equals(settings.order);\n  });\n  /*\r\n     it(\"should add the line's data properly\", () => {\r\n        fixture.componentInstance.data = [{ x: new Date(), y: 1 }];\r\n        plateService.chart.data = { datasets: [] };\r\n        //\r\n        fixture.detectChanges();\r\n        //\r\n        const added = plateService.chart.data.datasets[0];\r\n        expect(added.data).toBe(fixture.componentInstance.data);\r\n     });\r\n  */\n\n  /*\r\n     it('should add line do not duplicate lines', () => {\r\n        fixture.componentInstance.name = 'Some name';\r\n        fixture.componentInstance.order = 0;\r\n        plateService.chart.data = { datasets: [{ label: fixture.componentInstance.name, order: fixture.componentInstance.order }] };\r\n        //\r\n        fixture.detectChanges();\r\n        //\r\n        expect(plateService.chart.data.datasets.length).toBe(1);\r\n     });\r\n  \r\n     it('should add line do not delete other lines by order', () => {\r\n        fixture.componentInstance.name = 'Some name';\r\n        fixture.componentInstance.order = 0;\r\n        plateService.chart.data = { datasets: [{ label: fixture.componentInstance.name, order: Math.floor(Math.random() * 10) }] };\r\n        //\r\n        fixture.detectChanges();\r\n        //\r\n        expect(plateService.chart.data.datasets.length).toBe(2);\r\n     });\r\n  \r\n     it('should add line do not delete other lines by name', () => {\r\n        fixture.componentInstance.name = 'Some name';\r\n        fixture.componentInstance.order = 0;\r\n        plateService.chart.data = { datasets: [{ label: 'Other name', order: fixture.componentInstance.order }] };\r\n        //\r\n        fixture.detectChanges();\r\n        //\r\n        expect(plateService.chart.data.datasets.length).toBe(2);\r\n     });\r\n   */\n});","map":{"version":3,"sources":["C:\\projects\\own-npm\\charts\\projects\\charts-components\\src\\chart\\chart-plate\\chart-types\\line-chart\\chart-line.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// noinspection JSVoidFunctionReturnValueUsed\r\n\r\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { ChartLineComponent } from './chart-line.component';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { MockBuilder, MockProvider, MockRender } from \"ng-mocks\";\r\nimport { anyString, anything, capture, instance, mock, reset, verify, when } from \"ts-mockito\";\r\nimport { ReplaySubject, Subject } from \"rxjs\";\r\nimport { ChartService } from \"../../../services\";\r\nimport { ChartPlateComponent } from \"../../chart-plate.component\";\r\nimport { ChartDataModel, DateRangeModel } from \"../../../models\";\r\nimport { ChartModule } from \"../../../chart.module\";\r\nimport { ChartAxisLimitService } from \"../../../services/chart-axis-limit.service\";\r\nimport { ChartPlateService } from \"../../services/chart-plate.service\";\r\nimport { should } from \"@artstesh/it-should\";\r\nimport { ChartDataset } from \"chart.js\";\r\nimport { ChartLineSettings } from \"./chart-line.settings\";\r\nimport { Forger } from \"@artstesh/forger\";\r\nimport { SettingsMapService } from \"../../../services/settings-map.service\";\r\n\r\ndescribe('#chart-types LineChartComponent', () => {\r\n   let fixture: ComponentFixture<ChartLineComponent>;\r\n  let service = mock(ChartService);\r\n  const plateService = mock(ChartPlateService);\r\n  const limitService = mock(ChartAxisLimitService);\r\n  const mapService = mock(SettingsMapService);\r\n  let limitServiceChanged$: Subject<undefined>;\r\n  let chartInitialized: EventEmitter<unknown>;\r\n  let settings: ChartLineSettings;\r\n\r\n   beforeEach(async () => {\r\n     settings = new ChartLineSettings().copy(Forger.create<ChartLineSettings>()!);\r\n     limitServiceChanged$ = new Subject<undefined>();\r\n     chartInitialized = new EventEmitter();\r\n     when(plateService.chartInitialized).thenReturn(chartInitialized);\r\n     when(limitService.changed).thenReturn(limitServiceChanged$.asObservable());\r\n     return MockBuilder(ChartLineComponent, ChartModule)\r\n       .provide(MockProvider(ChartPlateService, instance(plateService)))\r\n       .provide(MockProvider(SettingsMapService, instance(mapService)))\r\n       .provide(MockProvider(ChartAxisLimitService, instance(limitService)))\r\n       .provide(MockProvider(ChartService, instance(service)));\r\n   });\r\n\r\n   beforeEach(() => {\r\n     fixture = MockRender(ChartLineComponent);\r\n     fixture.componentInstance.settings = settings;\r\n   });\r\n\r\n   afterEach(() => {\r\n     reset(mapService);\r\n     reset(plateService);\r\n     reset(limitService);\r\n     expect().nothing();\r\n   })\r\n\r\n   it('should create', () => {\r\n      expect(fixture.componentInstance).toBeTruthy();\r\n   });\r\n\r\n  it('should add line on chartInitialized', () => {\r\n    const dataset = Forger.create<number>()! as any; // a trick\r\n    const data = Forger.create<ChartDataModel[]>()!;\r\n    const settings = new ChartLineSettings().copy(Forger.create<ChartLineSettings>()!);\r\n    when(mapService.lineDataset(settings, data)).thenReturn(dataset);\r\n    //\r\n    chartInitialized.next();\r\n    //\r\n    verify(plateService.addDataset(anything())).once();\r\n  });\r\n\r\n   it('should define backgroundColor', () => {\r\n      chartInitialized.next();\r\n      //\r\n     const [dataset] = capture(plateService.addDataset).last();\r\n      should().string((dataset as ChartDataset<'line'>).backgroundColor as string).equals(settings.color);\r\n   });\r\n\r\n   it('should define borderColor', () => {\r\n      chartInitialized.next();\r\n      //\r\n     const [dataset] = capture(plateService.addDataset).last();\r\n      should().string((dataset as ChartDataset<'line'>).borderColor as string).equals(settings.color);\r\n   });\r\n\r\n   it('should define pointRadius', () => {\r\n      chartInitialized.next();\r\n      //\r\n     const [dataset] = capture(plateService.addDataset).last();\r\n      should().number((dataset as ChartDataset<'line'>).pointRadius as number).equals(settings.pointRadius as number);\r\n   });\r\n\r\n   it('should define type', () => {\r\n      chartInitialized.next();\r\n      //\r\n     const [dataset] = capture(plateService.addDataset).last();\r\n      should().string((dataset as ChartDataset<'line'>).type).equals('line');\r\n   });\r\n\r\n   it('should define name', () => {\r\n      chartInitialized.next();\r\n      //\r\n     const [dataset] = capture(plateService.addDataset).last();\r\n      should().string((dataset as ChartDataset<'line'>).label).equals(settings.name);\r\n   });\r\n\r\n  it('should define order', () => {\r\n    chartInitialized.next();\r\n    //\r\n    const [dataset] = capture(plateService.addDataset).last();\r\n    should().number((dataset as ChartDataset<'line'>).order).equals(settings.order);\r\n  });\r\n  /*\r\n     it(\"should add the line's data properly\", () => {\r\n        fixture.componentInstance.data = [{ x: new Date(), y: 1 }];\r\n        plateService.chart.data = { datasets: [] };\r\n        //\r\n        fixture.detectChanges();\r\n        //\r\n        const added = plateService.chart.data.datasets[0];\r\n        expect(added.data).toBe(fixture.componentInstance.data);\r\n     });\r\n  */\r\n/*\r\n   it('should add line do not duplicate lines', () => {\r\n      fixture.componentInstance.name = 'Some name';\r\n      fixture.componentInstance.order = 0;\r\n      plateService.chart.data = { datasets: [{ label: fixture.componentInstance.name, order: fixture.componentInstance.order }] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      expect(plateService.chart.data.datasets.length).toBe(1);\r\n   });\r\n\r\n   it('should add line do not delete other lines by order', () => {\r\n      fixture.componentInstance.name = 'Some name';\r\n      fixture.componentInstance.order = 0;\r\n      plateService.chart.data = { datasets: [{ label: fixture.componentInstance.name, order: Math.floor(Math.random() * 10) }] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      expect(plateService.chart.data.datasets.length).toBe(2);\r\n   });\r\n\r\n   it('should add line do not delete other lines by name', () => {\r\n      fixture.componentInstance.name = 'Some name';\r\n      fixture.componentInstance.order = 0;\r\n      plateService.chart.data = { datasets: [{ label: 'Other name', order: fixture.componentInstance.order }] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      expect(plateService.chart.data.datasets.length).toBe(2);\r\n   });\r\n */\r\n});\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}