{"ast":null,"code":"import _asyncToGenerator from \"C:/projects/own-npm/charts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { EventEmitter } from '@angular/core';\nimport { XLinearAxisComponent } from \"./x-linear-axis.component\";\nimport { MockBuilder, MockProvider, MockRender } from \"ng-mocks\";\nimport { ChartModule } from \"../../../../chart.module\";\nimport { capture, instance, mock, reset, when } from \"ts-mockito\";\nimport { ChartAxisLimitService } from \"../../../../services/chart-axis-limit.service\";\nimport { should } from \"@artstesh/it-should\";\nimport { ChartPlateService } from \"../../../services/chart-plate.service\";\ndescribe('#chart-elements XLinearAxisComponent', () => {\n  let fixture;\n  const limitService = mock(ChartAxisLimitService);\n  const plateService = mock(ChartPlateService);\n  let chartInitialized$;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    chartInitialized$ = new EventEmitter();\n    when(plateService.chartInitialized).thenReturn(chartInitialized$);\n    return MockBuilder(XLinearAxisComponent, ChartModule).provide(MockProvider(ChartAxisLimitService, instance(limitService))).provide(MockProvider(ChartPlateService, instance(plateService)));\n  }));\n  beforeEach(() => {\n    fixture = MockRender(XLinearAxisComponent);\n    fixture.detectChanges();\n  });\n  afterEach(() => {\n    reset(limitService);\n    reset(plateService);\n    expect().nothing();\n  });\n  it('should create', () => {\n    expect(fixture.componentInstance).toBeTruthy();\n  });\n  it('should add the axis on chartInitialized', () => {\n    chartInitialized$.next();\n    fixture.detectChanges(); //\n\n    const [id, scale] = capture(plateService.setScale).last();\n    should().string(id).equals(XLinearAxisComponent.id);\n    should().true(scale);\n  });\n});","map":{"version":3,"sources":["C:\\projects\\own-npm\\charts\\projects\\charts-components\\src\\chart\\chart-plate\\chart-elements\\axes\\x-linear-axis\\x-linear-axis.component.spec.ts"],"names":[],"mappings":";AACA,SAAS,YAAT,QAA6B,eAA7B;AAGA,SAAS,oBAAT,QAAqC,2BAArC;AAGA,SAAS,WAAT,EAAsB,YAAtB,EAAoC,UAApC,QAAsD,UAAtD;AACA,SAAS,WAAT,QAA4B,0BAA5B;AACA,SAAS,OAAT,EAAkB,QAAlB,EAA4B,IAA5B,EAAkC,KAAlC,EAAyC,IAAzC,QAAqD,YAArD;AACA,SAAS,qBAAT,QAAsC,+CAAtC;AACA,SAAS,MAAT,QAAuB,qBAAvB;AACA,SAAS,iBAAT,QAAkC,uCAAlC;AAEA,QAAQ,CAAC,sCAAD,EAAyC,MAAK;AACpD,MAAI,OAAJ;AACA,QAAM,YAAY,GAAG,IAAI,CAAC,qBAAD,CAAzB;AACA,QAAM,YAAY,GAAG,IAAI,CAAC,iBAAD,CAAzB;AACA,MAAI,iBAAJ;AAEA,EAAA,UAAU,iCAAC,aAAW;AACpB,IAAA,iBAAiB,GAAG,IAAI,YAAJ,EAApB;AACA,IAAA,IAAI,CAAC,YAAY,CAAC,gBAAd,CAAJ,CAAoC,UAApC,CAA+C,iBAA/C;AACA,WAAO,WAAW,CAAC,oBAAD,EAAuB,WAAvB,CAAX,CACJ,OADI,CACI,YAAY,CAAC,qBAAD,EAAwB,QAAQ,CAAC,YAAD,CAAhC,CADhB,EAEJ,OAFI,CAEI,YAAY,CAAC,iBAAD,EAAoB,QAAQ,CAAC,YAAD,CAA5B,CAFhB,CAAP;AAGD,GANS,EAAV;AAQA,EAAA,UAAU,CAAC,MAAK;AACd,IAAA,OAAO,GAAG,UAAU,CAAC,oBAAD,CAApB;AACA,IAAA,OAAO,CAAC,aAAR;AACD,GAHS,CAAV;AAKA,EAAA,SAAS,CAAC,MAAK;AACb,IAAA,KAAK,CAAC,YAAD,CAAL;AACA,IAAA,KAAK,CAAC,YAAD,CAAL;AACA,IAAA,MAAM,GAAG,OAAT;AACD,GAJQ,CAAT;AAMA,EAAA,EAAE,CAAC,eAAD,EAAkB,MAAK;AACvB,IAAA,MAAM,CAAC,OAAO,CAAC,iBAAT,CAAN,CAAkC,UAAlC;AACD,GAFC,CAAF;AAIA,EAAA,EAAE,CAAC,yCAAD,EAA4C,MAAK;AACjD,IAAA,iBAAiB,CAAC,IAAlB;AACA,IAAA,OAAO,CAAC,aAAR,GAFiD,CAGjD;;AACA,UAAM,CAAC,EAAD,EAAK,KAAL,IAAc,OAAO,CAAC,YAAY,CAAC,QAAd,CAAP,CAA+B,IAA/B,EAApB;AACA,IAAA,MAAM,GAAG,MAAT,CAAgB,EAAhB,EAAoB,MAApB,CAA2B,oBAAoB,CAAC,EAAhD;AACA,IAAA,MAAM,GAAG,IAAT,CAAc,KAAd;AACD,GAPC,CAAF;AAQD,CArCO,CAAR","sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { EventEmitter } from '@angular/core';\nimport {Forger} from \"@artstesh/forger\";\nimport {ReplaySubject} from \"rxjs\";\nimport { XLinearAxisComponent } from \"./x-linear-axis.component\";\nimport { DateRangeModel } from \"../../../../models\";\nimport { ChartPlateComponent } from \"../../../chart-plate.component\";\nimport { MockBuilder, MockProvider, MockRender } from \"ng-mocks\";\nimport { ChartModule } from \"../../../../chart.module\";\nimport { capture, instance, mock, reset, when } from \"ts-mockito\";\nimport { ChartAxisLimitService } from \"../../../../services/chart-axis-limit.service\";\nimport { should } from \"@artstesh/it-should\";\nimport { ChartPlateService } from \"../../../services/chart-plate.service\";\n\ndescribe('#chart-elements XLinearAxisComponent', () => {\n  let fixture: ComponentFixture<XLinearAxisComponent>;\n  const limitService = mock(ChartAxisLimitService);\n  const plateService = mock(ChartPlateService);\n  let chartInitialized$: EventEmitter<any>;\n\n  beforeEach(async () => {\n    chartInitialized$ = new EventEmitter();\n    when(plateService.chartInitialized).thenReturn(chartInitialized$);\n    return MockBuilder(XLinearAxisComponent, ChartModule)\n      .provide(MockProvider(ChartAxisLimitService, instance(limitService)))\n      .provide(MockProvider(ChartPlateService, instance(plateService)));\n  });\n\n  beforeEach(() => {\n    fixture = MockRender(XLinearAxisComponent);\n    fixture.detectChanges();\n  });\n\n  afterEach(() => {\n    reset(limitService);\n    reset(plateService);\n    expect().nothing();\n  })\n\n  it('should create', () => {\n    expect(fixture.componentInstance).toBeTruthy();\n  });\n\n  it('should add the axis on chartInitialized', () => {\n    chartInitialized$.next();\n    fixture.detectChanges();\n    //\n    const [id, scale] = capture(plateService.setScale).last();\n    should().string(id).equals(XLinearAxisComponent.id);\n    should().true(scale);\n  });\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}