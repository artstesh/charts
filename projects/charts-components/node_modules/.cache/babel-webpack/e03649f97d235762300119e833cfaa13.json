{"ast":null,"code":"import _asyncToGenerator from \"C:/projects/own-npm/charts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ChartBarComponent } from './chart-bar.component';\nimport { ChartPlateComponent } from '../../chart-plate.component';\nimport { EventEmitter } from '@angular/core';\nimport { MockBuilder, MockProvider, MockRender, ngMocks } from 'ng-mocks';\nimport { instance, mock, reset, verify, when } from 'ts-mockito';\nimport { Forger } from '@artstesh/forger';\nimport { ChartModule } from \"../../../chart.module\";\ndescribe('#chart-types ChartBarComponent', () => {\n  let fixture;\n  const parent = mock(ChartPlateComponent);\n  let chartInitialized;\n  let chart;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    chart = {\n      data: {\n        datasets: []\n      }\n    };\n    chartInitialized = new EventEmitter();\n    when(parent.chartInitialized).thenReturn(chartInitialized);\n    when(parent.chart).thenReturn(chart);\n    return MockBuilder(ChartBarComponent, ChartModule).provide(MockProvider(ChartPlateComponent, instance(parent)));\n  }));\n  beforeEach(() => {\n    fixture = MockRender(ChartBarComponent);\n  });\n  afterEach(() => {\n    reset(parent);\n  });\n  it('should create', () => {\n    const component = ngMocks.findInstances(ChartBarComponent)[0]; //\n\n    expect(component).toBeTruthy();\n  });\n  it('should add bar on ngOnChanges', () => {\n    const component = ngMocks.findInstances(ChartBarComponent)[0];\n    chart.data = {\n      datasets: []\n    }; //\n\n    fixture.detectChanges(); //\n\n    expect(chart.data.datasets.length).toBe(1);\n    verify(parent.updateChart(false)).twice();\n  });\n  it(\"should add bar's type properly\", () => {\n    const component = ngMocks.findInstances(ChartBarComponent)[0];\n    chart.data = {\n      datasets: []\n    }; //\n\n    fixture.detectChanges(); //\n\n    const added = chart.data.datasets[0];\n    expect(added.type).toBe('bar');\n  });\n  it(\"should add the bar's data properly\", () => {\n    fixture.componentInstance.data = [{\n      x: 0,\n      y: 1\n    }];\n    chart.data = {\n      datasets: []\n    }; //\n\n    fixture.detectChanges(); //\n\n    const added = chart.data.datasets[0];\n    expect(added.data).toBe(fixture.componentInstance.data);\n  });\n  it(\"should add the bar's name properly\", () => {\n    fixture.componentInstance._settings.name = Math.floor(Math.random() * 16777215).toString(16);\n    chart.data = {\n      datasets: []\n    }; //\n\n    fixture.detectChanges(); //\n\n    const added = chart.data.datasets[0];\n    expect(added.label).toBe(fixture.componentInstance.name);\n  });\n  it(\"should add the bar's color properly\", () => {\n    fixture.componentInstance.color = Math.floor(Math.random() * 16777215).toString(16);\n    chart.data = {\n      datasets: []\n    }; //\n\n    fixture.detectChanges(); //\n\n    const added = chart.data.datasets[0];\n    expect(added.backgroundColor).toBe(fixture.componentInstance.color);\n  });\n  it(\"should add the bar's yAxisId properly\", () => {\n    fixture.componentInstance.yAxisId = Math.floor(Math.random() * 16777215).toString(16);\n    chart.data = {\n      datasets: []\n    }; //\n\n    fixture.detectChanges(); //\n\n    const added = chart.data.datasets[0];\n    expect(added.yAxisID).toBe(fixture.componentInstance.yAxisId);\n  });\n  it(\"should add the bar's order properly\", () => {\n    fixture.componentInstance.order = Math.floor(Math.random() * 16777215);\n    chart.data = {\n      datasets: []\n    }; //\n\n    fixture.detectChanges(); //\n\n    const added = chart.data.datasets[0];\n    expect(added.order).toBe(fixture.componentInstance.order);\n  });\n  it('should not duplicate bars', () => {\n    fixture.componentInstance.name = 'Some name';\n    fixture.componentInstance.order = 0;\n    chart.data = {\n      datasets: [{\n        label: fixture.componentInstance.name,\n        order: fixture.componentInstance.order\n      }]\n    }; //\n\n    fixture.detectChanges(); //\n\n    expect(chart.data.datasets.length).toBe(1);\n  });\n  it('should not delete other bars by order', () => {\n    fixture.componentInstance.name = 'Some name';\n    fixture.componentInstance.order = 0;\n    chart.data = {\n      datasets: [{\n        label: fixture.componentInstance.name,\n        order: Forger.create({}, 1, {\n          \"type\": 6\n        })\n      }]\n    }; //\n\n    fixture.detectChanges(); //\n\n    expect(chart.data.datasets.length).toBe(2);\n  });\n  it('should not delete other bars by name', () => {\n    fixture.componentInstance.name = 'Some name';\n    fixture.componentInstance.order = 0;\n    chart.data = {\n      datasets: [{\n        label: 'Other name',\n        order: fixture.componentInstance.order\n      }]\n    }; //\n\n    fixture.detectChanges(); //\n\n    expect(chart.data.datasets.length).toBe(2);\n  });\n});","map":{"version":3,"sources":["C:\\projects\\own-npm\\charts\\projects\\charts-components\\src\\chart\\chart-plate\\chart-types\\bar-chart\\chart-bar.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { ChartBarComponent } from './chart-bar.component';\r\nimport { ChartPlateComponent } from '../../chart-plate.component';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { MockBuilder, MockProvider, MockRender, ngMocks } from 'ng-mocks';\r\nimport { instance, mock, reset, verify, when } from 'ts-mockito';\r\nimport { Forger } from '@artstesh/forger';\r\nimport Chart from 'chart.js';\r\nimport { ChartModule } from \"../../../chart.module\";\r\n\r\ndescribe('#chart-types ChartBarComponent', () => {\r\n   let fixture: ComponentFixture<ChartBarComponent>;\r\n   const parent = mock(ChartPlateComponent);\r\n   let chartInitialized: EventEmitter<unknown>;\r\n   let chart: any;\r\n\r\n   beforeEach(async () => {\r\n      chart = { data: { datasets: [] } };\r\n      chartInitialized = new EventEmitter();\r\n      when(parent.chartInitialized).thenReturn(chartInitialized);\r\n      when(parent.chart).thenReturn(chart);\r\n      return MockBuilder(ChartBarComponent, ChartModule).provide(MockProvider(ChartPlateComponent, instance(parent)));\r\n   });\r\n\r\n   beforeEach(() => {\r\n      fixture = MockRender(ChartBarComponent);\r\n   });\r\n\r\n   afterEach(() => {\r\n      reset(parent);\r\n   });\r\n\r\n   it('should create', () => {\r\n      const component = ngMocks.findInstances(ChartBarComponent)[0];\r\n      //\r\n      expect(component).toBeTruthy();\r\n   });\r\n\r\n   it('should add bar on ngOnChanges', () => {\r\n      const component = ngMocks.findInstances(ChartBarComponent)[0];\r\n      chart.data = { datasets: [] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      expect(chart.data.datasets.length).toBe(1);\r\n      verify(parent.updateChart(false)).twice();\r\n   });\r\n\r\n   it(\"should add bar's type properly\", () => {\r\n      const component = ngMocks.findInstances(ChartBarComponent)[0];\r\n      chart.data = { datasets: [] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      const added = chart.data.datasets[0];\r\n      expect(added.type).toBe('bar');\r\n   });\r\n\r\n   it(\"should add the bar's data properly\", () => {\r\n      fixture.componentInstance.data = [{ x: 0, y: 1 }];\r\n      chart.data = { datasets: [] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      const added = chart.data.datasets[0];\r\n      expect(added.data).toBe(fixture.componentInstance.data);\r\n   });\r\n\r\n   it(\"should add the bar's name properly\", () => {\r\n      fixture.componentInstance._settings.name = Math.floor(Math.random() * 16777215).toString(16);\r\n      chart.data = { datasets: [] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      const added = chart.data.datasets[0];\r\n      expect(added.label).toBe(fixture.componentInstance.name);\r\n   });\r\n\r\n   it(\"should add the bar's color properly\", () => {\r\n      fixture.componentInstance.color = Math.floor(Math.random() * 16777215).toString(16);\r\n      chart.data = { datasets: [] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      const added = chart.data.datasets[0];\r\n      expect(added.backgroundColor).toBe(fixture.componentInstance.color);\r\n   });\r\n\r\n   it(\"should add the bar's yAxisId properly\", () => {\r\n      fixture.componentInstance.yAxisId = Math.floor(Math.random() * 16777215).toString(16);\r\n      chart.data = { datasets: [] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      const added = chart.data.datasets[0];\r\n      expect(added.yAxisID).toBe(fixture.componentInstance.yAxisId);\r\n   });\r\n\r\n   it(\"should add the bar's order properly\", () => {\r\n      fixture.componentInstance.order = Math.floor(Math.random() * 16777215);\r\n      chart.data = { datasets: [] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      const added = chart.data.datasets[0];\r\n      expect(added.order).toBe(fixture.componentInstance.order);\r\n   });\r\n\r\n   it('should not duplicate bars', () => {\r\n      fixture.componentInstance.name = 'Some name';\r\n      fixture.componentInstance.order = 0;\r\n      chart.data = {\r\n         datasets: [{ label: fixture.componentInstance.name, order: fixture.componentInstance.order } as any]\r\n      };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      expect(chart.data.datasets.length).toBe(1);\r\n   });\r\n\r\n   it('should not delete other bars by order', () => {\r\n      fixture.componentInstance.name = 'Some name';\r\n      fixture.componentInstance.order = 0;\r\n      chart.data = { datasets: [{ label: fixture.componentInstance.name, order: Forger.create<number>()! } as any] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      expect(chart.data.datasets.length).toBe(2);\r\n   });\r\n\r\n   it('should not delete other bars by name', () => {\r\n      fixture.componentInstance.name = 'Some name';\r\n      fixture.componentInstance.order = 0;\r\n      chart.data = { datasets: [{ label: 'Other name', order: fixture.componentInstance.order } as any] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      expect(chart.data.datasets.length).toBe(2);\r\n   });\r\n});\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}