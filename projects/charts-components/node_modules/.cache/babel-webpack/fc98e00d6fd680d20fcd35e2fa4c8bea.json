{"ast":null,"code":"import _asyncToGenerator from \"C:/projects/own-npm/charts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ChartLineComponent } from './chart-line.component';\nimport { EventEmitter } from '@angular/core';\nimport { MockBuilder, MockProvider, MockRender } from \"ng-mocks\";\nimport { anyString, anything, capture, instance, mock, reset, verify, when } from \"ts-mockito\";\nimport { Subject } from \"rxjs\";\nimport { ChartService } from \"../../../services\";\nimport { ChartModule } from \"../../../chart.module\";\nimport { ChartAxisLimitService } from \"../../../services/chart-axis-limit.service\";\nimport { ChartPlateService } from \"../../services/chart-plate.service\";\nimport { should } from \"@artstesh/it-should\";\ndescribe('#chart-types LineChartComponent', () => {\n  let fixture;\n  let service = mock(ChartService);\n  const plateService = mock(ChartPlateService);\n  const limitService = mock(ChartAxisLimitService);\n  let limitServiceChanged$;\n  let chartInitialized;\n  let chart;\n  const color = '#000';\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    limitServiceChanged$ = new Subject();\n    chart = {\n      options: {\n        plugins: {}\n      },\n      data: {\n        datasets: []\n      }\n    };\n    chartInitialized = new EventEmitter();\n    when(plateService.chartInitialized).thenReturn(chartInitialized);\n    when(limitService.changed).thenReturn(limitServiceChanged$.asObservable());\n    when(service.getRandomColor(anyString())).thenReturn(color);\n    return MockBuilder(ChartLineComponent, ChartModule).provide(MockProvider(ChartPlateService, instance(plateService))).provide(MockProvider(ChartAxisLimitService, instance(limitService))).provide(MockProvider(ChartService, instance(service)));\n  }));\n  beforeEach(() => {\n    fixture = MockRender(ChartLineComponent);\n  });\n  afterEach(() => {\n    reset(plateService);\n    reset(limitService);\n    expect().nothing();\n  });\n  it('should create', () => {\n    expect(fixture.componentInstance).toBeTruthy();\n  });\n  it('should define backgroundColor if not defined', () => {\n    chartInitialized.next(); //\n\n    const [dataset] = capture(plateService.addDataset).last();\n    should().string(dataset.backgroundColor).equals(color);\n  });\n  it('should add line on chartInitialized', () => {\n    chartInitialized.next(); //\n\n    verify(plateService.addDataset(anything()).once());\n  });\n  it('should define borderColor if not defined', () => {\n    chartInitialized.next(); //\n\n    const [dataset] = capture(plateService.addDataset).last();\n    should().string(dataset.borderColor).equals(color);\n  });\n  it(\"should add line's type properly\", () => {\n    plateService.chart.data = {\n      datasets: []\n    }; //\n\n    fixture.detectChanges(); //\n\n    const added = plateService.chart.data.datasets[0];\n    expect(added.type).toBe('line');\n  });\n  /*\r\n     it(\"should add the line's data properly\", () => {\r\n        fixture.componentInstance.data = [{ x: new Date(), y: 1 }];\r\n        plateService.chart.data = { datasets: [] };\r\n        //\r\n        fixture.detectChanges();\r\n        //\r\n        const added = plateService.chart.data.datasets[0];\r\n        expect(added.data).toBe(fixture.componentInstance.data);\r\n     });\r\n  */\n\n  it(\"should add the line's name properly\", () => {\n    fixture.componentInstance._settings.name = Math.floor(Math.random() * 16777215).toString(16);\n    plateService.chart.data = {\n      datasets: []\n    }; //\n\n    fixture.detectChanges(); //\n\n    const added = plateService.chart.data.datasets[0];\n    expect(added.label).toBe(fixture.componentInstance._settings.name);\n  });\n  it(\"should add the line's color properly\", () => {\n    fixture.componentInstance._settings.color = Math.floor(Math.random() * 16777215).toString(16);\n    plateService.chart.data = {\n      datasets: []\n    }; //\n\n    fixture.detectChanges(); //\n\n    const added = plateService.chart.data.datasets[0];\n    expect(added.backgroundColor).toBe(fixture.componentInstance._settings.color);\n    expect(added.borderColor).toBe(fixture.componentInstance._settings.color);\n  });\n  /*\r\n     it(\"should add the line's yAxisId properly\", () => {\r\n        fixture.componentInstance.yAxisId = Math.floor(Math.random() * 16777215).toString(16);\r\n        plateService.chart.data = { datasets: [] };\r\n        //\r\n        fixture.detectChanges();\r\n        //\r\n        const added = plateService.chart.data.datasets[0];\r\n        expect(added.yAxisID).toBe(fixture.componentInstance.yAxisId);\r\n     });\r\n  */\n\n  it(\"should add the line's order properly\", () => {\n    fixture.componentInstance._settings.order = Math.floor(Math.random() * 100);\n    plateService.chart.data = {\n      datasets: []\n    }; //\n\n    fixture.detectChanges(); //\n\n    const added = plateService.chart.data.datasets[0];\n    expect(added.order).toBe(fixture.componentInstance._settings.order);\n  });\n  /*\r\n     it('should add line do not duplicate lines', () => {\r\n        fixture.componentInstance.name = 'Some name';\r\n        fixture.componentInstance.order = 0;\r\n        plateService.chart.data = { datasets: [{ label: fixture.componentInstance.name, order: fixture.componentInstance.order }] };\r\n        //\r\n        fixture.detectChanges();\r\n        //\r\n        expect(plateService.chart.data.datasets.length).toBe(1);\r\n     });\r\n  \r\n     it('should add line do not delete other lines by order', () => {\r\n        fixture.componentInstance.name = 'Some name';\r\n        fixture.componentInstance.order = 0;\r\n        plateService.chart.data = { datasets: [{ label: fixture.componentInstance.name, order: Math.floor(Math.random() * 10) }] };\r\n        //\r\n        fixture.detectChanges();\r\n        //\r\n        expect(plateService.chart.data.datasets.length).toBe(2);\r\n     });\r\n  \r\n     it('should add line do not delete other lines by name', () => {\r\n        fixture.componentInstance.name = 'Some name';\r\n        fixture.componentInstance.order = 0;\r\n        plateService.chart.data = { datasets: [{ label: 'Other name', order: fixture.componentInstance.order }] };\r\n        //\r\n        fixture.detectChanges();\r\n        //\r\n        expect(plateService.chart.data.datasets.length).toBe(2);\r\n     });\r\n   */\n});","map":{"version":3,"sources":["C:\\projects\\own-npm\\charts\\projects\\charts-components\\src\\chart\\chart-plate\\chart-types\\line-chart\\chart-line.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { ChartLineComponent } from './chart-line.component';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { MockBuilder, MockProvider, MockRender } from \"ng-mocks\";\r\nimport { anyString, anything, capture, instance, mock, reset, verify, when } from \"ts-mockito\";\r\nimport { ReplaySubject, Subject } from \"rxjs\";\r\nimport { ChartService } from \"../../../services\";\r\nimport { ChartPlateComponent } from \"../../chart-plate.component\";\r\nimport { DateRangeModel } from \"../../../models\";\r\nimport { ChartModule } from \"../../../chart.module\";\r\nimport { ChartAxisLimitService } from \"../../../services/chart-axis-limit.service\";\r\nimport { ChartPlateService } from \"../../services/chart-plate.service\";\r\nimport { should } from \"@artstesh/it-should\";\r\nimport { ChartDataset } from \"chart.js\";\r\n\r\ndescribe('#chart-types LineChartComponent', () => {\r\n   let fixture: ComponentFixture<ChartLineComponent>;\r\n  let service = mock(ChartService);\r\n  const plateService = mock(ChartPlateService);\r\n  const limitService = mock(ChartAxisLimitService);\r\n  let limitServiceChanged$: Subject<undefined>;\r\n  let chartInitialized: EventEmitter<unknown>;\r\n  let chart: any;\r\n   const color = '#000';\r\n\r\n   beforeEach(async () => {\r\n     limitServiceChanged$ = new Subject<undefined>();\r\n     chart = { options: { plugins: {} }, data: {datasets: []} };\r\n     chartInitialized = new EventEmitter();\r\n     when(plateService.chartInitialized).thenReturn(chartInitialized);\r\n     when(limitService.changed).thenReturn(limitServiceChanged$.asObservable());\r\n     when(service.getRandomColor(anyString())).thenReturn(color);\r\n     return MockBuilder(ChartLineComponent, ChartModule)\r\n       .provide(MockProvider(ChartPlateService, instance(plateService)))\r\n       .provide(MockProvider(ChartAxisLimitService, instance(limitService)))\r\n       .provide(MockProvider(ChartService, instance(service)));\r\n   });\r\n\r\n   beforeEach(() => {\r\n     fixture = MockRender(ChartLineComponent);\r\n   });\r\n\r\n   afterEach(() => {\r\n     reset(plateService);\r\n     reset(limitService);\r\n     expect().nothing();\r\n   })\r\n\r\n   it('should create', () => {\r\n      expect(fixture.componentInstance).toBeTruthy();\r\n   });\r\n\r\n   it('should define backgroundColor if not defined', () => {\r\n      chartInitialized.next();\r\n      //\r\n     const [dataset] = capture(plateService.addDataset).last();\r\n      should().string((dataset as ChartDataset<'line'>).backgroundColor as string).equals(color);\r\n   });\r\n\r\n  it('should add line on chartInitialized', () => {\r\n    chartInitialized.next();\r\n    //\r\n    verify(plateService.addDataset(anything()).once());\r\n  });\r\n\r\n   it('should define borderColor if not defined', () => {\r\n      chartInitialized.next();\r\n      //\r\n     const [dataset] = capture(plateService.addDataset).last();\r\n      should().string((dataset as ChartDataset<'line'>).borderColor as string).equals(color);\r\n   });\r\n\r\n   it(\"should add line's type properly\", () => {\r\n      plateService.chart.data = { datasets: [] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      const added = plateService.chart.data.datasets[0];\r\n      expect(added.type).toBe('line');\r\n   });\r\n/*\r\n   it(\"should add the line's data properly\", () => {\r\n      fixture.componentInstance.data = [{ x: new Date(), y: 1 }];\r\n      plateService.chart.data = { datasets: [] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      const added = plateService.chart.data.datasets[0];\r\n      expect(added.data).toBe(fixture.componentInstance.data);\r\n   });\r\n*/\r\n   it(\"should add the line's name properly\", () => {\r\n      fixture.componentInstance._settings.name = Math.floor(Math.random() * 16777215).toString(16);\r\n      plateService.chart.data = { datasets: [] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      const added = plateService.chart.data.datasets[0];\r\n      expect(added.label).toBe(fixture.componentInstance._settings.name);\r\n   });\r\n\r\n   it(\"should add the line's color properly\", () => {\r\n      fixture.componentInstance._settings.color = Math.floor(Math.random() * 16777215).toString(16);\r\n      plateService.chart.data = { datasets: [] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      const added = plateService.chart.data.datasets[0];\r\n      expect(added.backgroundColor).toBe(fixture.componentInstance._settings.color);\r\n      expect(added.borderColor).toBe(fixture.componentInstance._settings.color);\r\n   });\r\n/*\r\n   it(\"should add the line's yAxisId properly\", () => {\r\n      fixture.componentInstance.yAxisId = Math.floor(Math.random() * 16777215).toString(16);\r\n      plateService.chart.data = { datasets: [] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      const added = plateService.chart.data.datasets[0];\r\n      expect(added.yAxisID).toBe(fixture.componentInstance.yAxisId);\r\n   });\r\n*/\r\n   it(\"should add the line's order properly\", () => {\r\n      fixture.componentInstance._settings.order = Math.floor(Math.random() * 100);\r\n      plateService.chart.data = { datasets: [] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      const added = plateService.chart.data.datasets[0];\r\n      expect(added.order).toBe(fixture.componentInstance._settings.order);\r\n   });\r\n/*\r\n   it('should add line do not duplicate lines', () => {\r\n      fixture.componentInstance.name = 'Some name';\r\n      fixture.componentInstance.order = 0;\r\n      plateService.chart.data = { datasets: [{ label: fixture.componentInstance.name, order: fixture.componentInstance.order }] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      expect(plateService.chart.data.datasets.length).toBe(1);\r\n   });\r\n\r\n   it('should add line do not delete other lines by order', () => {\r\n      fixture.componentInstance.name = 'Some name';\r\n      fixture.componentInstance.order = 0;\r\n      plateService.chart.data = { datasets: [{ label: fixture.componentInstance.name, order: Math.floor(Math.random() * 10) }] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      expect(plateService.chart.data.datasets.length).toBe(2);\r\n   });\r\n\r\n   it('should add line do not delete other lines by name', () => {\r\n      fixture.componentInstance.name = 'Some name';\r\n      fixture.componentInstance.order = 0;\r\n      plateService.chart.data = { datasets: [{ label: 'Other name', order: fixture.componentInstance.order }] };\r\n      //\r\n      fixture.detectChanges();\r\n      //\r\n      expect(plateService.chart.data.datasets.length).toBe(2);\r\n   });\r\n */\r\n});\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}