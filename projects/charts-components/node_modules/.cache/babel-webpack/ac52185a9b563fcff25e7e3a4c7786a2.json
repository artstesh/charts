{"ast":null,"code":"import _asyncToGenerator from \"C:/projects/own-npm/charts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { EventEmitter } from '@angular/core';\nimport { Forger } from \"@artstesh/forger\";\nimport { ReplaySubject } from \"rxjs\";\nimport { XLinearAxisComponent } from \"./x-linear-axis.component\";\nimport { ChartPlateComponent } from \"../../../chart-plate.component\";\nimport { MockBuilder, MockProvider, MockRender } from \"ng-mocks\";\nimport { ChartModule } from \"../../../../chart.module\";\nimport { instance, mock, reset, when } from \"ts-mockito\";\nimport { ChartAxisLimitService } from \"../../../../services/chart-axis-limit.service\";\ndescribe('#chart-elements XLinearAxisComponent', () => {\n  let fixture;\n  let parent;\n  let dateRange$;\n  const limitService = mock(ChartAxisLimitService);\n  const chartPlate = mock(ChartPlateComponent);\n  let chartInitialized$;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    chartInitialized$ = new EventEmitter();\n    when(chartPlate.chartInitialized).thenReturn(chartInitialized$);\n    const chartStub = jasmine.createSpyObj(['update', 'data', 'options']);\n    dateRange$ = new ReplaySubject();\n    parent = {\n      chart: chartStub,\n      chartInitialized: new EventEmitter(),\n      updateChart: jasmine.createSpy('updateChart'),\n      dateRange$: dateRange$\n    };\n    return MockBuilder(XLinearAxisComponent, ChartModule).provide(MockProvider(ChartAxisLimitService, instance(limitService))).provide(MockProvider(ChartPlateComponent, parent));\n  }));\n  beforeEach(() => {\n    fixture = MockRender(XLinearAxisComponent);\n    fixture.detectChanges();\n  });\n  afterEach(() => {\n    reset(limitService);\n    expect().nothing();\n  });\n  it('should create', () => {\n    expect(fixture.componentInstance).toBeTruthy();\n  });\n  it('should add the axis on chartInitialized', () => {\n    parent.chart.options.scales = {}; //\n\n    parent.chartInitialized.next();\n    fixture.detectChanges(); //\n\n    expect(parent.chart.options.scales[XLinearAxisComponent.id]).toBeTruthy();\n  });\n  it('should update chart on chartInitialized', () => {\n    parent.chart.options.scales = {}; //\n\n    parent.chartInitialized.next();\n    fixture.detectChanges(); //\n\n    expect(parent.updateChart).toHaveBeenCalledTimes(1);\n  });\n  it('should add the grid display property', () => {\n    parent.chart.options.scales = {}; //\n\n    fixture.componentInstance.displayGrid = true;\n    parent.chartInitialized.next();\n    fixture.detectChanges(); //\n\n    const gridProp = parent.chart.options.scales[XLinearAxisComponent.id].grid;\n    expect(gridProp.display).toBe(fixture.componentInstance.displayGrid);\n  });\n  it('no min & max restrictions by default', () => {\n    parent.chart.options.scales = {}; //\n\n    parent.chartInitialized.next();\n    fixture.detectChanges(); //\n\n    expect(parent.chart.options.scales[XLinearAxisComponent.id].min).not.toBeTruthy();\n    expect(parent.chart.options.scales[XLinearAxisComponent.id].max).not.toBeTruthy();\n  });\n  it('should add the min property', () => {\n    parent.chart.options.scales = {};\n    const updateModel = {\n      minX: Forger.create({}, 1, {\n        \"type\": 6\n      }),\n      maxX: Forger.create({}, 1, {\n        \"type\": 6\n      })\n    }; //\n\n    parent.dateRange$.next(updateModel);\n    fixture.detectChanges(); //\n\n    expect(parent.chart.options.scales[XLinearAxisComponent.id].min).toBe(updateModel.minX);\n    expect(parent.chart.options.scales[XLinearAxisComponent.id].max).toBe(updateModel.maxX);\n  });\n});","map":{"version":3,"sources":["C:\\projects\\own-npm\\charts\\projects\\charts-components\\src\\chart\\chart-plate\\chart-elements\\axes\\x-linear-axis\\x-linear-axis.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { EventEmitter } from '@angular/core';\nimport {Forger} from \"@artstesh/forger\";\nimport {ReplaySubject} from \"rxjs\";\nimport { XLinearAxisComponent } from \"./x-linear-axis.component\";\nimport { DateRangeModel } from \"../../../../models\";\nimport { ChartPlateComponent } from \"../../../chart-plate.component\";\nimport { MockBuilder, MockProvider, MockRender } from \"ng-mocks\";\nimport { ChartModule } from \"../../../../chart.module\";\nimport { instance, mock, reset, when } from \"ts-mockito\";\nimport { ChartAxisLimitService } from \"../../../../services/chart-axis-limit.service\";\n\ndescribe('#chart-elements XLinearAxisComponent', () => {\n  let fixture: ComponentFixture<XLinearAxisComponent>;\n  let parent: any;\n  let dateRange$: ReplaySubject<DateRangeModel>;\n  const limitService = mock(ChartAxisLimitService);\n  const chartPlate = mock(ChartPlateComponent);\n  let chartInitialized$: EventEmitter<any>;\n\n  beforeEach(async () => {\n    chartInitialized$ = new EventEmitter();\n    when(chartPlate.chartInitialized).thenReturn(chartInitialized$);\n\n    const chartStub = jasmine.createSpyObj(['update', 'data', 'options']);\n    dateRange$ = new ReplaySubject<DateRangeModel>();\n    parent = {\n      chart: chartStub,\n      chartInitialized: new EventEmitter(),\n      updateChart: jasmine.createSpy('updateChart'),\n      dateRange$: dateRange$\n    };\n    return MockBuilder(XLinearAxisComponent, ChartModule)\n      .provide(MockProvider(ChartAxisLimitService, instance(limitService)))\n      .provide(MockProvider(ChartPlateComponent, parent));\n  });\n\n  beforeEach(() => {\n    fixture = MockRender(XLinearAxisComponent);\n    fixture.detectChanges();\n  });\n\n  afterEach(() => {\n    reset(limitService);\n    expect().nothing();\n  })\n\n  it('should create', () => {\n    expect(fixture.componentInstance).toBeTruthy();\n  });\n\n  it('should add the axis on chartInitialized', () => {\n    parent.chart.options.scales = {};\n    //\n    parent.chartInitialized.next();\n    fixture.detectChanges();\n    //\n    expect(parent.chart.options.scales[XLinearAxisComponent.id]).toBeTruthy();\n  });\n\n  it('should update chart on chartInitialized', () => {\n    parent.chart.options.scales = {};\n    //\n    parent.chartInitialized.next();\n    fixture.detectChanges();\n    //\n    expect(parent.updateChart).toHaveBeenCalledTimes(1);\n  });\n\n  it('should add the grid display property', () => {\n    parent.chart.options.scales = {};\n    //\n    fixture.componentInstance.displayGrid = true;\n    parent.chartInitialized.next();\n    fixture.detectChanges();\n    //\n    const gridProp = parent.chart.options.scales[XLinearAxisComponent.id].grid;\n    expect(gridProp.display).toBe(fixture.componentInstance.displayGrid);\n  });\n\n  it('no min & max restrictions by default', () => {\n    parent.chart.options.scales = {};\n    //\n    parent.chartInitialized.next();\n    fixture.detectChanges();\n    //\n    expect(parent.chart.options.scales[XLinearAxisComponent.id].min).not.toBeTruthy();\n    expect(parent.chart.options.scales[XLinearAxisComponent.id].max).not.toBeTruthy();\n  });\n\n  it('should add the min property', () => {\n    parent.chart.options.scales = {};\n    const updateModel: DateRangeModel = {minX: Forger.create<number>()!, maxX: Forger.create<number>()!};\n    //\n    parent.dateRange$.next(updateModel);\n    fixture.detectChanges();\n    //\n    expect(parent.chart.options.scales[XLinearAxisComponent.id].min).toBe(updateModel.minX);\n    expect(parent.chart.options.scales[XLinearAxisComponent.id].max).toBe(updateModel.maxX);\n  });\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}