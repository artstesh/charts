{"ast":null,"code":"import _asyncToGenerator from \"C:/projects/own-npm/charts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ChartBarComponent } from './chart-bar.component';\nimport { EventEmitter } from '@angular/core';\nimport { MockBuilder, MockProvider, MockRender } from 'ng-mocks';\nimport { anything, instance, mock, reset, verify, when } from \"ts-mockito\";\nimport { Forger } from '@artstesh/forger';\nimport { ChartModule } from \"../../../chart.module\";\nimport { ChartService } from \"../../../services\";\nimport { ChartAxisLimitService } from \"../../../services/chart-axis-limit.service\";\nimport { Subject } from \"rxjs\";\nimport { ChartPlateService } from \"../../services/chart-plate.service\";\nimport { ChartBarSettings } from \"./chart-bar.settings\";\ndescribe('#chart-types ChartBarComponent', () => {\n  let fixture;\n  let service = mock(ChartService);\n  const plateService = mock(ChartPlateService);\n  const limitService = mock(ChartAxisLimitService);\n  let limitServiceChanged$;\n  let chartInitialized;\n  let settings;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    settings = new ChartBarSettings().copy(Forger.create({}, 1, {\n      \"type\": 0,\n      \"children\": [{\n        \"name\": \"order\",\n        \"type\": 6\n      }, {\n        \"name\": \"name\",\n        \"type\": 5\n      }, {\n        \"name\": \"color\",\n        \"type\": 5\n      }, {\n        \"name\": \"isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"copy\",\n        \"type\": 0,\n        \"children\": []\n      }, {\n        \"name\": \"_isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"_copy\",\n        \"type\": 0,\n        \"children\": []\n      }, {\n        \"name\": \"order\",\n        \"type\": 6\n      }, {\n        \"name\": \"name\",\n        \"type\": 5\n      }, {\n        \"name\": \"color\",\n        \"type\": 5\n      }, {\n        \"name\": \"isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"copy\",\n        \"type\": 0,\n        \"children\": []\n      }, {\n        \"name\": \"_isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"_copy\",\n        \"type\": 0,\n        \"children\": []\n      }, {\n        \"name\": \"thickness\",\n        \"type\": 6\n      }, {\n        \"name\": \"setThickness\",\n        \"type\": 0,\n        \"children\": [{\n          \"name\": \"order\",\n          \"type\": 6\n        }, {\n          \"name\": \"name\",\n          \"type\": 5\n        }, {\n          \"name\": \"color\",\n          \"type\": 5\n        }, {\n          \"name\": \"isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"order\",\n          \"type\": 6\n        }, {\n          \"name\": \"name\",\n          \"type\": 5\n        }, {\n          \"name\": \"color\",\n          \"type\": 5\n        }, {\n          \"name\": \"isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"thickness\",\n          \"type\": 6\n        }, {\n          \"name\": \"setThickness\",\n          \"type\": 9\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 9\n        }]\n      }, {\n        \"name\": \"_isSame\",\n        \"type\": 8\n      }, {\n        \"name\": \"_copy\",\n        \"type\": 0,\n        \"children\": [{\n          \"name\": \"order\",\n          \"type\": 6\n        }, {\n          \"name\": \"name\",\n          \"type\": 5\n        }, {\n          \"name\": \"color\",\n          \"type\": 5\n        }, {\n          \"name\": \"isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"order\",\n          \"type\": 6\n        }, {\n          \"name\": \"name\",\n          \"type\": 5\n        }, {\n          \"name\": \"color\",\n          \"type\": 5\n        }, {\n          \"name\": \"isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 0,\n          \"children\": []\n        }, {\n          \"name\": \"thickness\",\n          \"type\": 6\n        }, {\n          \"name\": \"setThickness\",\n          \"type\": 9\n        }, {\n          \"name\": \"_isSame\",\n          \"type\": 8\n        }, {\n          \"name\": \"_copy\",\n          \"type\": 9\n        }]\n      }]\n    }));\n    limitServiceChanged$ = new Subject();\n    chartInitialized = new EventEmitter();\n    when(plateService.chartInitialized).thenReturn(chartInitialized);\n    when(limitService.changed).thenReturn(limitServiceChanged$.asObservable());\n    return MockBuilder(ChartBarComponent, ChartModule).provide(MockProvider(ChartPlateService, instance(plateService))).provide(MockProvider(ChartAxisLimitService, instance(limitService))).provide(MockProvider(ChartService, instance(service)));\n  }));\n  beforeEach(() => {\n    fixture = MockRender(ChartBarComponent);\n  });\n  afterEach(() => {\n    reset(plateService);\n    reset(limitService);\n    reset(parent);\n  });\n  it('should create', () => {\n    expect(fixture.componentInstance).toBeTruthy();\n  });\n  it('should add line on chartInitialized', () => {\n    chartInitialized.next(); //\n\n    verify(plateService.addDataset(anything())).once();\n  });\n});","map":{"version":3,"sources":["C:\\projects\\own-npm\\charts\\projects\\charts-components\\src\\chart\\chart-plate\\chart-types\\bar-chart\\chart-bar.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { ChartBarComponent } from './chart-bar.component';\r\nimport { ChartPlateComponent } from '../../chart-plate.component';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { MockBuilder, MockProvider, MockRender, ngMocks } from 'ng-mocks';\r\nimport { anyString, anything, instance, mock, reset, verify, when } from \"ts-mockito\";\r\nimport { Forger } from '@artstesh/forger';\r\nimport Chart from 'chart.js';\r\nimport { ChartModule } from \"../../../chart.module\";\r\nimport { ChartService } from \"../../../services\";\r\nimport { ChartAxisLimitService } from \"../../../services/chart-axis-limit.service\";\r\nimport { Subject } from \"rxjs\";\r\nimport { ChartPlateService } from \"../../services/chart-plate.service\";\r\nimport { ChartLineSettings } from \"../line-chart/chart-line.settings\";\r\nimport { ChartBarSettings } from \"./chart-bar.settings\";\r\n\r\ndescribe('#chart-types ChartBarComponent', () => {\r\n   let fixture: ComponentFixture<ChartBarComponent>;\r\n  let service = mock(ChartService);\r\n  const plateService = mock(ChartPlateService);\r\n  const limitService = mock(ChartAxisLimitService);\r\n  let limitServiceChanged$: Subject<undefined>;\r\n  let chartInitialized: EventEmitter<unknown>;\r\n  let settings: ChartBarSettings;\r\n\r\n   beforeEach(async () => {\r\n     settings = new ChartBarSettings().copy(Forger.create<ChartBarSettings>()!);\r\n     limitServiceChanged$ = new Subject<undefined>();\r\n     chartInitialized = new EventEmitter();\r\n     when(plateService.chartInitialized).thenReturn(chartInitialized);\r\n     when(limitService.changed).thenReturn(limitServiceChanged$.asObservable());\r\n      return MockBuilder(ChartBarComponent, ChartModule)\r\n        .provide(MockProvider(ChartPlateService, instance(plateService)))\r\n        .provide(MockProvider(ChartAxisLimitService, instance(limitService)))\r\n        .provide(MockProvider(ChartService, instance(service)));\r\n   });\r\n\r\n   beforeEach(() => {\r\n      fixture = MockRender(ChartBarComponent);\r\n   });\r\n\r\n   afterEach(() => {\r\n     reset(plateService);\r\n     reset(limitService);\r\n      reset(parent);\r\n   });\r\n\r\n  it('should create', () => {\r\n    expect(fixture.componentInstance).toBeTruthy();\r\n  });\r\n\r\n  it('should add line on chartInitialized', () => {\r\n    chartInitialized.next();\r\n    //\r\n    verify(plateService.addDataset(anything())).once();\r\n  });\r\n});\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}